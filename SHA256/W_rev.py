import numpy as np

#################################################################
#
#
#           Section 1: Function Definitions
#
#
#################################################################


# test_bits = 10001011011101100101100111110001
# test_bits2 = 11001111001011101001001011100110
# test_bits3 = 11111001010100100010101101011010

test_bits = [1,0,0,0,1,0,1,1,0,1,1,1,0,1,1,0,0,1,0,1,1,0,0,1,1,1,1,1,0,0,0,1]
test_bits2 = [1,1,0,0,1,1,1,1,0,0,1,0,1,1,1,0,1,0,0,1,0,0,1,0,1,1,1,0,0,1,1,0]
test_bits3 = [1,1,1,1,1,0,0,1,0,1,0,1,0,0,1,0,0,0,1,0,1,0,1,1,0,1,0,1,1,0,1,0]

test_bits_array = np.asarray(test_bits)
test_bits_array2 = np.asarray(test_bits2)
test_bits_array3 = np.asarray(test_bits3)

# Use np.roll for logical right shift

def sigma_0(a1):
  x1 = np.roll(a1, 7)
  x2 = np.roll(a1, 18)
  x3 = np.roll(a1, 3)
  x3[0:3] = 0
  r1 = np.bitwise_xor(x1, x2)
  r2 = np.bitwise_xor(r1, x3)
  return r2

def sigma_1(a1):
  x1 = np.roll(a1, 17)
  x2 = np.roll(a1, 19)
  x3 = np.roll(a1, 10)
  x3[0:10] = 0
  r1 = np.bitwise_xor(x1, x2)
  r2 = np.bitwise_xor(r1, x3)
  return r2

def Usigma_0(a1):
  x1 = np.roll(a1, 2)
  x2 = np.roll(a1, 13)
  x3 = np.roll(a1, 22)
  r1 = np.bitwise_xor(x1, x2)
  r2 = np.bitwise_xor(r1, x3)
  return r2

def Usigma_1(a1):
  x1 = np.roll(a1, 6)
  x2 = np.roll(a1, 11)
  x3 = np.roll(a1, 25)
  r1 = np.bitwise_xor(x1, x2)
  r2 = np.bitwise_xor(r1, x3)
  return r2

sigma_0(test_bits_array2)

def bits_add(a1, a2):
  carry = 0
  result = [0] * len(a1)
  for i in range(len(a1) - 1, -1, -1):
    r = carry
    r += a1[i]
    r += a2[i]
    result[i] = (1 if r % 2 == 1 else 0)
    carry = 0 if r < 2 else 1
  return result

def bits_choose(a1, a2, a3):
  result = [0] * len(a1)
  for i in range(len(a1) - 1, -1, -1):
    if(a1[i] == 1):
      result[i] = a2[i]
    else:
      result[i] = a3[i]
  return result

def bits_majority(a1, a2, a3):
  result = [0] * len(a1)
  for i in range(len(a1) - 1, -1, -1):
    sum = a1[i] + a2[i] + a3[i]
    if(sum > 1):
      result[i] = 1
    else:
      result[i] = 0
  return result

#bits_add(test_bits_array, sigma_0(test_bits_array2))
#print(Usigma_1(test_bits_array))
#print(bits_choose(test_bits_array, test_bits_array2, test_bits_array3))
#print(bits_majority(test_bits_array, test_bits_array2, test_bits_array3))

#################################################################
#
#
#           Section 2: Constant Definitions
#
#
#################################################################

# def TempConverter(strInput):
#   print("[", end="")
#   for i in strInput:
#     print(i, end="")
#     print(",", end="")
#   print("]")

# TempConverter("test")

#K_list = []

K_list = [[0,1,0,0,0,0,1,0,1,0,0,0,1,0,1,0,0,0,1,0,1,1,1,1,1,0,0,1,1,0,0,0]] # 0
K_list.append([0,1,1,1,0,0,0,1,0,0,1,1,0,1,1,1,0,1,0,0,0,1,0,0,1,0,0,1,0,0,0,1])
K_list.append([1,0,1,1,0,1,0,1,1,1,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,1,0,0,1,1,1,1])
K_list.append([1,1,1,0,1,0,0,1,1,0,1,1,0,1,0,1,1,1,0,1,1,0,1,1,1,0,1,0,0,1,0,1])
K_list.append([0,0,1,1,1,0,0,1,0,1,0,1,0,1,1,0,1,1,0,0,0,0,1,0,0,1,0,1,1,0,1,1])
K_list.append([0,1,0,1,1,0,0,1,1,1,1,1,0,0,0,1,0,0,0,1,0,0,0,1,1,1,1,1,0,0,0,1]) # 5
K_list.append([1,0,0,1,0,0,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,1,0,1,0,1,0,0,1,0,0])
K_list.append([1,0,1,0,1,0,1,1,0,0,0,1,1,1,0,0,0,1,0,1,1,1,1,0,1,1,0,1,0,1,0,1])
K_list.append([1,1,0,1,1,0,0,0,0,0,0,0,0,1,1,1,1,0,1,0,1,0,1,0,1,0,0,1,1,0,0,0])
K_list.append([0,0,0,1,0,0,1,0,1,0,0,0,0,0,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,0,0,1])
K_list.append([0,0,1,0,0,1,0,0,0,0,1,1,0,0,0,1,1,0,0,0,0,1,0,1,1,0,1,1,1,1,1,0]) # 10
K_list.append([0,1,0,1,0,1,0,1,0,0,0,0,1,1,0,0,0,1,1,1,1,1,0,1,1,1,0,0,0,0,1,1])
K_list.append([0,1,1,1,0,0,1,0,1,0,1,1,1,1,1,0,0,1,0,1,1,1,0,1,0,1,1,1,0,1,0,0])
K_list.append([1,0,0,0,0,0,0,0,1,1,0,1,1,1,1,0,1,0,1,1,0,0,0,1,1,1,1,1,1,1,1,0])
K_list.append([1,0,0,1,1,0,1,1,1,1,0,1,1,1,0,0,0,0,0,0,0,1,1,0,1,0,1,0,0,1,1,1])
K_list.append([1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,1,1,1,1,1,0,0,0,1,0,1,1,1,0,1,0,0]) # 15
K_list.append([1,1,1,0,0,1,0,0,1,0,0,1,1,0,1,1,0,1,1,0,1,0,0,1,1,1,0,0,0,0,0,1])
K_list.append([1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,0,0,1,0,0,0,1,1,1,1,0,0,0,0,1,1,0])
K_list.append([0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,1,1,0,0,1,1,1,0,1,1,1,0,0,0,1,1,0])
K_list.append([0,0,1,0,0,1,0,0,0,0,0,0,1,1,0,0,1,0,1,0,0,0,0,1,1,1,0,0,1,1,0,0])
K_list.append([0,0,1,0,1,1,0,1,1,1,1,0,1,0,0,1,0,0,1,0,1,1,0,0,0,1,1,0,1,1,1,1]) # 20
K_list.append([0,1,0,0,1,0,1,0,0,1,1,1,0,1,0,0,1,0,0,0,0,1,0,0,1,0,1,0,1,0,1,0])
K_list.append([0,1,0,1,1,1,0,0,1,0,1,1,0,0,0,0,1,0,1,0,1,0,0,1,1,1,0,1,1,1,0,0])
K_list.append([0,1,1,1,0,1,1,0,1,1,1,1,1,0,0,1,1,0,0,0,1,0,0,0,1,1,0,1,1,0,1,0])
K_list.append([1,0,0,1,1,0,0,0,0,0,1,1,1,1,1,0,0,1,0,1,0,0,0,1,0,1,0,1,0,0,1,0])
K_list.append([1,0,1,0,1,0,0,0,0,0,1,1,0,0,0,1,1,1,0,0,0,1,1,0,0,1,1,0,1,1,0,1]) # 25
K_list.append([1,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,1,1,1,1,1,0,0,1,0,0,0])
K_list.append([1,0,1,1,1,1,1,1,0,1,0,1,1,0,0,1,0,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1])
K_list.append([1,1,0,0,0,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,0,0,1,1])
K_list.append([1,1,0,1,0,1,0,1,1,0,1,0,0,1,1,1,1,0,0,1,0,0,0,1,0,1,0,0,0,1,1,1])
K_list.append([0,0,0,0,0,1,1,0,1,1,0,0,1,0,1,0,0,1,1,0,0,0,1,1,0,1,0,1,0,0,0,1]) # 30
K_list.append([0,0,0,1,0,1,0,0,0,0,1,0,1,0,0,1,0,0,1,0,1,0,0,1,0,1,1,0,0,1,1,1])
K_list.append([0,0,1,0,0,1,1,1,1,0,1,1,0,1,1,1,0,0,0,0,1,0,1,0,1,0,0,0,0,1,0,1])
K_list.append([0,0,1,0,1,1,1,0,0,0,0,1,1,0,1,1,0,0,1,0,0,0,0,1,0,0,1,1,1,0,0,0])
K_list.append([0,1,0,0,1,1,0,1,0,0,1,0,1,1,0,0,0,1,1,0,1,1,0,1,1,1,1,1,1,1,0,0])
K_list.append([0,1,0,1,0,0,1,1,0,0,1,1,1,0,0,0,0,0,0,0,1,1,0,1,0,0,0,1,0,0,1,1]) # 35
K_list.append([0,1,1,0,0,1,0,1,0,0,0,0,1,0,1,0,0,1,1,1,0,0,1,1,0,1,0,1,0,1,0,0])
K_list.append([0,1,1,1,0,1,1,0,0,1,1,0,1,0,1,0,0,0,0,0,1,0,1,0,1,0,1,1,1,0,1,1])
K_list.append([1,0,0,0,0,0,0,1,1,1,0,0,0,0,1,0,1,1,0,0,1,0,0,1,0,0,1,0,1,1,1,0])
K_list.append([1,0,0,1,0,0,1,0,0,1,1,1,0,0,1,0,0,0,1,0,1,1,0,0,1,0,0,0,0,1,0,1])
K_list.append([1,0,1,0,0,0,1,0,1,0,1,1,1,1,1,1,1,1,1,0,1,0,0,0,1,0,1,0,0,0,0,1]) # 40
K_list.append([1,0,1,0,1,0,0,0,0,0,0,1,1,0,1,0,0,1,1,0,0,1,1,0,0,1,0,0,1,0,1,1])
K_list.append([1,1,0,0,0,0,1,0,0,1,0,0,1,0,1,1,1,0,0,0,1,0,1,1,0,1,1,1,0,0,0,0])
K_list.append([1,1,0,0,0,1,1,1,0,1,1,0,1,1,0,0,0,1,0,1,0,0,0,1,1,0,1,0,0,0,1,1])
K_list.append([1,1,0,1,0,0,0,1,1,0,0,1,0,0,1,0,1,1,1,0,1,0,0,0,0,0,0,1,1,0,0,1])
K_list.append([1,1,0,1,0,1,1,0,1,0,0,1,1,0,0,1,0,0,0,0,0,1,1,0,0,0,1,0,0,1,0,0]) # 45
K_list.append([1,1,1,1,0,1,0,0,0,0,0,0,1,1,1,0,0,0,1,1,0,1,0,1,1,0,0,0,0,1,0,1])
K_list.append([0,0,0,1,0,0,0,0,0,1,1,0,1,0,1,0,1,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0])
K_list.append([0,0,0,1,1,0,0,1,1,0,1,0,0,1,0,0,1,1,0,0,0,0,0,1,0,0,0,1,0,1,1,0])
K_list.append([0,0,0,1,1,1,1,0,0,0,1,1,0,1,1,1,0,1,1,0,1,1,0,0,0,0,0,0,1,0,0,0])
K_list.append([0,0,1,0,0,1,1,1,0,1,0,0,1,0,0,0,0,1,1,1,0,1,1,1,0,1,0,0,1,1,0,0]) # 50
K_list.append([0,0,1,1,0,1,0,0,1,0,1,1,0,0,0,0,1,0,1,1,1,1,0,0,1,0,1,1,0,1,0,1])
K_list.append([0,0,1,1,1,0,0,1,0,0,0,1,1,1,0,0,0,0,0,0,1,1,0,0,1,0,1,1,0,0,1,1])
K_list.append([0,1,0,0,1,1,1,0,1,1,0,1,1,0,0,0,1,0,1,0,1,0,1,0,0,1,0,0,1,0,1,0])
K_list.append([0,1,0,1,1,0,1,1,1,0,0,1,1,1,0,0,1,1,0,0,1,0,1,0,0,1,0,0,1,1,1,1])
K_list.append([0,1,1,0,1,0,0,0,0,0,1,0,1,1,1,0,0,1,1,0,1,1,1,1,1,1,1,1,0,0,1,1]) # 55
K_list.append([0,1,1,1,0,1,0,0,1,0,0,0,1,1,1,1,1,0,0,0,0,0,1,0,1,1,1,0,1,1,1,0])
K_list.append([0,1,1,1,1,0,0,0,1,0,1,0,0,1,0,1,0,1,1,0,0,0,1,1,0,1,1,0,1,1,1,1])
K_list.append([1,0,0,0,0,1,0,0,1,1,0,0,1,0,0,0,0,1,1,1,1,0,0,0,0,0,0,1,0,1,0,0])
K_list.append([1,0,0,0,1,1,0,0,1,1,0,0,0,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0])
K_list.append([1,0,0,1,0,0,0,0,1,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0]) # 60
K_list.append([1,0,1,0,0,1,0,0,0,1,0,1,0,0,0,0,0,1,1,0,1,1,0,0,1,1,1,0,1,0,1,1])
K_list.append([1,0,1,1,1,1,1,0,1,1,1,1,1,0,0,1,1,0,1,0,0,0,1,1,1,1,1,1,0,1,1,1])
K_list.append([1,1,0,0,0,1,1,0,0,1,1,1,0,0,0,1,0,1,1,1,1,0,0,0,1,1,1,1,0,0,1,0]) # 63

### This list is initial registers a-h.

H0_init_list = [[0,1,1,0,1,0,1,0,0,0,0,0,1,0,0,1,1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1]]
H0_init_list.append([1,0,1,1,1,0,1,1,0,1,1,0,0,1,1,1,1,0,1,0,1,1,1,0,1,0,0,0,0,1,0,1])
H0_init_list.append([0,0,1,1,1,1,0,0,0,1,1,0,1,1,1,0,1,1,1,1,0,0,1,1,0,1,1,1,0,0,1,0])
H0_init_list.append([1,0,1,0,0,1,0,1,0,1,0,0,1,1,1,1,1,1,1,1,0,1,0,1,0,0,1,1,1,0,1,0])
H0_init_list.append([0,1,0,1,0,0,0,1,0,0,0,0,1,1,1,0,0,1,0,1,0,0,1,0,0,1,1,1,1,1,1,1])
H0_init_list.append([1,0,0,1,1,0,1,1,0,0,0,0,0,1,0,1,0,1,1,0,1,0,0,0,1,0,0,0,1,1,0,0])
H0_init_list.append([0,0,0,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,0,1,1,0,0,1,1,0,1,0,1,0,1,1])
H0_init_list.append([0,1,0,1,1,0,1,1,1,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,0,0,1,1,0,0,1])

# print(K_list)
# print(len(K_list))

# print(len(HO_init_list[0]))
# print(len(HO_init_list))

# for i, j in enumerate(K_list):
#   print("Iter ", end="")
#   print(i, end="")
#   print(":  ", end="")
#   TempConverter(j)

W_8_15_bitcoin = [[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]]
W_8_15_bitcoin.append([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])
W_8_15_bitcoin.append([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])
W_8_15_bitcoin.append([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])
W_8_15_bitcoin.append([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])
W_8_15_bitcoin.append([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])
W_8_15_bitcoin.append([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])
W_8_15_bitcoin.append([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0])


#################################################################
#
#
#           Section 3: Tree Making and stuff
#
#
#################################################################
#  Functions -- bits_majority, bits_choose, bits_add, sigma_0, sigma_1, Usigma_0, Usigma_1
#################################################################

print(bits_add(Usigma_0(H0_init_list[0]), bits_majority(H0_init_list[0], H0_init_list[1], H0_init_list[2])))

a_reg = 3
b_reg = 3
